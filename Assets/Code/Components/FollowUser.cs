// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DireDungeons {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using uFrame.ECS;
    using UniRx;
    
    
    [uFrame.Attributes.uFrameIdentifier("462d14d0-0fd2-4e2c-88e9-9809dd257e20")]
    public partial class FollowUser : uFrame.ECS.EcsComponent {
        
        private Subject<Single> _PosHeadingObservable;
        
        private Subject<Vector3> _wantPosObservable;
        
        private Subject<Single> _distanceObservable;
        
        private Subject<Single> _PosElevationObservable;
        
        private Subject<GameObject> _TargetObservable;
        
        private Subject<Single> _PosDistanceObservable;
        
        [UnityEngine.SerializeField()]
        private Single _PosHeading;
        
        [UnityEngine.SerializeField()]
        private Vector3 _wantPos;
        
        [UnityEngine.SerializeField()]
        private Single _distance;
        
        [UnityEngine.SerializeField()]
        private Single _PosElevation;
        
        [UnityEngine.SerializeField()]
        private GameObject _Target;
        
        [UnityEngine.SerializeField()]
        private Single _PosDistance;
        
        public int ComponentID {
            get {
                return 2;
            }
        }
        
        public IObservable<Single> PosHeadingObservable {
            get {
                if (_PosHeadingObservable == null) {
                    _PosHeadingObservable = new Subject<Single>();
                }
                return _PosHeadingObservable;
            }
        }
        
        public IObservable<Vector3> wantPosObservable {
            get {
                if (_wantPosObservable == null) {
                    _wantPosObservable = new Subject<Vector3>();
                }
                return _wantPosObservable;
            }
        }
        
        public IObservable<Single> distanceObservable {
            get {
                if (_distanceObservable == null) {
                    _distanceObservable = new Subject<Single>();
                }
                return _distanceObservable;
            }
        }
        
        public IObservable<Single> PosElevationObservable {
            get {
                if (_PosElevationObservable == null) {
                    _PosElevationObservable = new Subject<Single>();
                }
                return _PosElevationObservable;
            }
        }
        
        public IObservable<GameObject> TargetObservable {
            get {
                if (_TargetObservable == null) {
                    _TargetObservable = new Subject<GameObject>();
                }
                return _TargetObservable;
            }
        }
        
        public IObservable<Single> PosDistanceObservable {
            get {
                if (_PosDistanceObservable == null) {
                    _PosDistanceObservable = new Subject<Single>();
                }
                return _PosDistanceObservable;
            }
        }
        
        public Single PosHeading {
            get {
                return _PosHeading;
            }
            set {
                _PosHeading = value;
                if (_PosHeadingObservable != null) {
                    _PosHeadingObservable.OnNext(value);
                }
            }
        }
        
        public Vector3 wantPos {
            get {
                return _wantPos;
            }
            set {
                _wantPos = value;
                if (_wantPosObservable != null) {
                    _wantPosObservable.OnNext(value);
                }
            }
        }
        
        public Single distance {
            get {
                return _distance;
            }
            set {
                _distance = value;
                if (_distanceObservable != null) {
                    _distanceObservable.OnNext(value);
                }
            }
        }
        
        public Single PosElevation {
            get {
                return _PosElevation;
            }
            set {
                _PosElevation = value;
                if (_PosElevationObservable != null) {
                    _PosElevationObservable.OnNext(value);
                }
            }
        }
        
        public GameObject Target {
            get {
                return _Target;
            }
            set {
                _Target = value;
                if (_TargetObservable != null) {
                    _TargetObservable.OnNext(value);
                }
            }
        }
        
        public Single PosDistance {
            get {
                return _PosDistance;
            }
            set {
                _PosDistance = value;
                if (_PosDistanceObservable != null) {
                    _PosDistanceObservable.OnNext(value);
                }
            }
        }
    }
}
