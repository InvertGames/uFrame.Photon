// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DireDungeons {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using uFrame.Kernel;
    using uFrame.ECS;
    
    
    [uFrame.Attributes.uFrameIdentifier("53f97191-ae18-42e4-969f-1ae730a373de")]
    public partial class LobbySystem : uFrame.ECS.EcsSystem, uFrame.ECS.ISystemUpdate {
        
        private IEcsComponentManagerOf<LobbyButton> _LobbyButtonManager;
        
        private IEcsComponentManagerOf<LobbyMenu> _LobbyMenuManager;
        
        private IEcsComponentManagerOf<UpdateConnected> _UpdateConnectedManager;
        
        private LobbySystemPointerClickHandler LobbySystemPointerClickHandlerInstance = new LobbySystemPointerClickHandler();
        
        private LobbySystemOnConnectedToMasterHandler LobbySystemOnConnectedToMasterHandlerInstance = new LobbySystemOnConnectedToMasterHandler();
        
        private LobbySystemUpdateHandler LobbySystemUpdateHandlerInstance = new LobbySystemUpdateHandler();
        
        public IEcsComponentManagerOf<LobbyButton> LobbyButtonManager {
            get {
                return _LobbyButtonManager;
            }
            set {
                _LobbyButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LobbyMenu> LobbyMenuManager {
            get {
                return _LobbyMenuManager;
            }
            set {
                _LobbyMenuManager = value;
            }
        }
        
        public IEcsComponentManagerOf<UpdateConnected> UpdateConnectedManager {
            get {
                return _UpdateConnectedManager;
            }
            set {
                _UpdateConnectedManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            LobbyButtonManager = ComponentSystem.RegisterComponent<LobbyButton>();
            LobbyMenuManager = ComponentSystem.RegisterComponent<LobbyMenu>();
            UpdateConnectedManager = ComponentSystem.RegisterComponent<UpdateConnected>();
            this.OnEvent<uFrame.ECS.PointerClickDispatcher>().Subscribe(_=>{ LobbySystemPointerClickFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnConnectedToMasterDispatcher>().Subscribe(_=>{ LobbySystemOnConnectedToMasterFilter(_); }).DisposeWith(this);
        }
        
        protected void LobbySystemPointerClickHandler(uFrame.ECS.PointerClickDispatcher data, LobbyButton source) {
            var handler = LobbySystemPointerClickHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void LobbySystemPointerClickFilter(uFrame.ECS.PointerClickDispatcher data) {
            var SourceLobbyButton = LobbyButtonManager[data.EntityId];
            if (SourceLobbyButton == null) {
                return;
            }
            this.LobbySystemPointerClickHandler(data, SourceLobbyButton);
        }
        
        protected void LobbySystemOnConnectedToMasterHandler(uFrame.ECS.OnConnectedToMasterDispatcher data, LobbyMenu source) {
            var handler = LobbySystemOnConnectedToMasterHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void LobbySystemOnConnectedToMasterFilter(uFrame.ECS.OnConnectedToMasterDispatcher data) {
            var SourceLobbyMenu = LobbyMenuManager[data.EntityId];
            if (SourceLobbyMenu == null) {
                return;
            }
            this.LobbySystemOnConnectedToMasterHandler(data, SourceLobbyMenu);
        }
        
        protected void LobbySystemUpdateHandler(UpdateConnected group) {
            var handler = LobbySystemUpdateHandlerInstance;
            handler.System = this;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void LobbySystemUpdateFilter() {
            var UpdateConnectedItems = UpdateConnectedManager.Components;
            for (var UpdateConnectedIndex = 0
            ; UpdateConnectedIndex < UpdateConnectedItems.Count; UpdateConnectedIndex++
            ) {
                this.LobbySystemUpdateHandler(UpdateConnectedItems[UpdateConnectedIndex]);
            }
        }
        
        public virtual void SystemUpdate() {
            LobbySystemUpdateFilter();
        }
    }
}
