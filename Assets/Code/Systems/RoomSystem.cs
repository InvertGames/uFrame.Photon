// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DireDungeons {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using DireDungeons;
    using uFrame.Kernel;
    using UniRx;
    using uFrame.ECS;
    
    
    [uFrame.Attributes.uFrameIdentifier("9b607ca7-ed5e-4fee-9b9b-ff55eafbe74d")]
    public partial class RoomSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<LobbyButton> _LobbyButtonManager;
        
        private IEcsComponentManagerOf<Room> _RoomManager;
        
        private IEcsComponentManagerOf<Driver> _DriverManager;
        
        private PhotonSystemOnJoinedRoomHandler PhotonSystemOnJoinedRoomHandlerInstance = new PhotonSystemOnJoinedRoomHandler();
        
        private PhotonSystemOnPhotonJoinRoomFailedHandler PhotonSystemOnPhotonJoinRoomFailedHandlerInstance = new PhotonSystemOnPhotonJoinRoomFailedHandler();
        
        private PhotonSystemLevelWasLoadedHandler PhotonSystemLevelWasLoadedHandlerInstance = new PhotonSystemLevelWasLoadedHandler();
        
        public IEcsComponentManagerOf<LobbyButton> LobbyButtonManager {
            get {
                return _LobbyButtonManager;
            }
            set {
                _LobbyButtonManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Room> RoomManager {
            get {
                return _RoomManager;
            }
            set {
                _RoomManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Driver> DriverManager {
            get {
                return _DriverManager;
            }
            set {
                _DriverManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            LobbyButtonManager = ComponentSystem.RegisterComponent<LobbyButton>();
            RoomManager = ComponentSystem.RegisterComponent<Room>();
            DriverManager = ComponentSystem.RegisterComponent<Driver>();
            this.OnEvent<uFrame.ECS.OnJoinedRoomDispatcher>().Subscribe(_=>{ PhotonSystemOnJoinedRoomFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnPhotonJoinRoomFailedDispatcher>().Subscribe(_=>{ PhotonSystemOnPhotonJoinRoomFailedFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.Kernel.LevelWasLoadedEvent>().Subscribe(_=>{ PhotonSystemLevelWasLoadedFilter(_); }).DisposeWith(this);
        }
        
        protected void PhotonSystemOnJoinedRoomHandler(uFrame.ECS.OnJoinedRoomDispatcher data, LobbyButton source) {
            var handler = PhotonSystemOnJoinedRoomHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void PhotonSystemOnJoinedRoomFilter(uFrame.ECS.OnJoinedRoomDispatcher data) {
            var SourceLobbyButton = LobbyButtonManager[data.EntityId];
            if (SourceLobbyButton == null) {
                return;
            }
            this.PhotonSystemOnJoinedRoomHandler(data, SourceLobbyButton);
        }
        
        protected void PhotonSystemOnPhotonJoinRoomFailedHandler(uFrame.ECS.OnPhotonJoinRoomFailedDispatcher data, LobbyButton source) {
            var handler = PhotonSystemOnPhotonJoinRoomFailedHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void PhotonSystemOnPhotonJoinRoomFailedFilter(uFrame.ECS.OnPhotonJoinRoomFailedDispatcher data) {
            var SourceLobbyButton = LobbyButtonManager[data.EntityId];
            if (SourceLobbyButton == null) {
                return;
            }
            this.PhotonSystemOnPhotonJoinRoomFailedHandler(data, SourceLobbyButton);
        }
        
        protected void PhotonSystemLevelWasLoadedHandler(uFrame.Kernel.LevelWasLoadedEvent data, Room group) {
            var handler = PhotonSystemLevelWasLoadedHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void PhotonSystemLevelWasLoadedFilter(uFrame.Kernel.LevelWasLoadedEvent data) {
            var RoomItems = RoomManager.Components;
            for (var RoomIndex = 0
            ; RoomIndex < RoomItems.Count; RoomIndex++
            ) {
                this.PhotonSystemLevelWasLoadedHandler(data, RoomItems[RoomIndex]);
            }
        }
    }
}
